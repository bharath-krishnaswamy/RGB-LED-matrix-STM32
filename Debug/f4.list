
f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003028  08003028  0002100c  2**0
                  CONTENTS
  4 .ARM          00000008  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003030  08003030  0002100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000100c  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000100c  08004044  0002100c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c0  08004044  000210c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002100c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a74d  00000000  00000000  0002103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001861  00000000  00000000  0002b789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002dbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002009b  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000827a  00000000  00000000  0004e753  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5aad  00000000  00000000  000569cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c47a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003158  00000000  00000000  0011c4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000100c 	.word	0x2000100c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ff8 	.word	0x08002ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001010 	.word	0x20001010
 80001c4:	08002ff8 	.word	0x08002ff8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fce8 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8de 	bl	8000694 <MX_GPIO_Init>
  MX_TIM10_Init();
 80004d8:	f000 f890 	bl	80005fc <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f8b0 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, clk2_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <main+0x50>)
 80004e8:	f001 f832 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Lat_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x50>)
 80004f4:	f001 f82c 	bl	8001550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <main+0x50>)
 8000500:	f001 f826 	bl	8001550 <HAL_GPIO_WritePin>
//  HAL_TIM_Base_Start_IT(&htim11);
  HAL_TIM_Base_Start_IT(&htim10);
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x54>)
 8000506:	f001 fce4 	bl	8001ed2 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, data, 2);
 800050a:	2202      	movs	r2, #2
 800050c:	4904      	ldr	r1, [pc, #16]	; (8000520 <main+0x58>)
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x5c>)
 8000510:	f001 ff3f 	bl	8002392 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000514:	e7fe      	b.n	8000514 <main+0x4c>
 8000516:	bf00      	nop
 8000518:	40020800 	.word	0x40020800
 800051c:	20001034 	.word	0x20001034
 8000520:	200010b8 	.word	0x200010b8
 8000524:	20001074 	.word	0x20001074

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fd56 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 f802 	bl	80015b8 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 f943 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fa5b 	bl	8001a98 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 f92c 	bl	8000844 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	; 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_TIM10_Init+0x3c>)
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <MX_TIM10_Init+0x40>)
 8000604:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_TIM10_Init+0x3c>)
 8000608:	2232      	movs	r2, #50	; 0x32
 800060a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_TIM10_Init+0x3c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_TIM10_Init+0x3c>)
 8000614:	2202      	movs	r2, #2
 8000616:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_TIM10_Init+0x3c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_TIM10_Init+0x3c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_TIM10_Init+0x3c>)
 8000626:	f001 fc29 	bl	8001e7c <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8000630:	f000 f908 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20001034 	.word	0x20001034
 800063c:	40014400 	.word	0x40014400

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_USART1_UART_Init+0x50>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_USART1_UART_Init+0x4c>)
 800064c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_USART1_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_USART1_UART_Init+0x4c>)
 8000678:	f001 fe3e 	bl	80022f8 <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000682:	f000 f8df 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20001074 	.word	0x20001074
 8000690:	40011000 	.word	0x40011000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a50      	ldr	r2, [pc, #320]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a49      	ldr	r2, [pc, #292]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b43      	ldr	r3, [pc, #268]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a42      	ldr	r2, [pc, #264]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <MX_GPIO_Init+0x160>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b3c      	ldr	r3, [pc, #240]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a3b      	ldr	r2, [pc, #236]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <MX_GPIO_Init+0x160>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <MX_GPIO_Init+0x160>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R0_Pin|G0_Pin|B0_Pin|R1_Pin
 8000736:	2200      	movs	r2, #0
 8000738:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800073c:	482e      	ldr	r0, [pc, #184]	; (80007f8 <MX_GPIO_Init+0x164>)
 800073e:	f000 ff07 	bl	8001550 <HAL_GPIO_WritePin>
                          |G1_Pin|B1_Pin|A_Pin|B_Pin
                          |C_Pin|D_Pin|Clk_Pin|Lat_Pin
                          |OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(clk2_GPIO_Port, clk2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000748:	482c      	ldr	r0, [pc, #176]	; (80007fc <MX_GPIO_Init+0x168>)
 800074a:	f000 ff01 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(clk3_GPIO_Port, clk3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2101      	movs	r1, #1
 8000752:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_GPIO_Init+0x16c>)
 8000754:	f000 fefc 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : R0_Pin G0_Pin B0_Pin R1_Pin
                           G1_Pin B1_Pin D_Pin Clk_Pin */
  GPIO_InitStruct.Pin = R0_Pin|G0_Pin|B0_Pin|R1_Pin
 8000758:	f240 633f 	movw	r3, #1599	; 0x63f
 800075c:	617b      	str	r3, [r7, #20]
                          |G1_Pin|B1_Pin|D_Pin|Clk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4821      	ldr	r0, [pc, #132]	; (80007f8 <MX_GPIO_Init+0x164>)
 8000772:	f000 fd3b 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin;
 8000776:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <MX_GPIO_Init+0x164>)
 8000790:	f000 fd2c 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : clk2_Pin */
  GPIO_InitStruct.Pin = clk2_Pin;
 8000794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(clk2_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_GPIO_Init+0x168>)
 80007ae:	f000 fd1d 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Lat_Pin OE_Pin */
  GPIO_InitStruct.Pin = Lat_Pin|OE_Pin;
 80007b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480b      	ldr	r0, [pc, #44]	; (80007f8 <MX_GPIO_Init+0x164>)
 80007cc:	f000 fd0e 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : clk3_Pin */
  GPIO_InitStruct.Pin = clk3_Pin;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(clk3_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_GPIO_Init+0x16c>)
 80007e8:	f000 fd00 	bl	80011ec <HAL_GPIO_Init>

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020800 	.word	0x40020800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020c00 	.word	0x40020c00

08000804 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	slots_left = data[0];
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_UART_RxCpltCallback+0x34>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_UART_RxCpltCallback+0x38>)
 8000814:	601a      	str	r2, [r3, #0]
	slots_occ = data[1];
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_UART_RxCpltCallback+0x34>)
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	461a      	mov	r2, r3
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_UART_RxCpltCallback+0x3c>)
 800081e:	601a      	str	r2, [r3, #0]
	ChangeMatrix();
 8000820:	f000 fad0 	bl	8000dc4 <ChangeMatrix>
	HAL_UART_Receive_IT(huart, data, 2);
 8000824:	2202      	movs	r2, #2
 8000826:	4904      	ldr	r1, [pc, #16]	; (8000838 <HAL_UART_RxCpltCallback+0x34>)
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f001 fdb2 	bl	8002392 <HAL_UART_Receive_IT>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200010b8 	.word	0x200010b8
 800083c:	200010b4 	.word	0x200010b4
 8000840:	20001030 	.word	0x20001030

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    while (1) {}
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x4>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800088a:	2007      	movs	r0, #7
 800088c:	f000 fc4a 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_TIM_Base_MspInit+0x48>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d115      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_TIM_Base_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2019      	movs	r0, #25
 80008d0:	f000 fc33 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008d4:	2019      	movs	r0, #25
 80008d6:	f000 fc4c 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40014400 	.word	0x40014400
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_UART_MspInit+0x94>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d134      	bne.n	8000978 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000918:	f043 0310 	orr.w	r3, r3, #16
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x98>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0x98>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000958:	2307      	movs	r3, #7
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_UART_MspInit+0x9c>)
 8000964:	f000 fc42 	bl	80011ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2025      	movs	r0, #37	; 0x25
 800096e:	f000 fbe4 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000972:	2025      	movs	r0, #37	; 0x25
 8000974:	f000 fbfd 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40011000 	.word	0x40011000
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 fab0 	bl	8000f44 <HAL_IncTick>
//  }



  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80009ec:	485b      	ldr	r0, [pc, #364]	; (8000b5c <TIM1_UP_TIM10_IRQHandler+0x174>)
 80009ee:	f001 fa94 	bl	8001f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  HAL_GPIO_TogglePin(Clk_GPIO_Port, Clk_Pin);
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f6:	485a      	ldr	r0, [pc, #360]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 80009f8:	f000 fdc3 	bl	8001582 <HAL_GPIO_TogglePin>

  if((HAL_GPIO_ReadPin(Clk_GPIO_Port, Clk_Pin) == GPIO_PIN_SET) && (count < 129))
 80009fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a00:	4857      	ldr	r0, [pc, #348]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000a02:	f000 fd8d 	bl	8001520 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d171      	bne.n	8000af0 <TIM1_UP_TIM10_IRQHandler+0x108>
 8000a0c:	4b55      	ldr	r3, [pc, #340]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b80      	cmp	r3, #128	; 0x80
 8000a12:	dc6d      	bgt.n	8000af0 <TIM1_UP_TIM10_IRQHandler+0x108>
//
//		  count++;
//	  }


	  if((count/4)%2 == 0)
 8000a14:	4b53      	ldr	r3, [pc, #332]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da00      	bge.n	8000a1e <TIM1_UP_TIM10_IRQHandler+0x36>
 8000a1c:	3303      	adds	r3, #3
 8000a1e:	109b      	asrs	r3, r3, #2
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d128      	bne.n	8000a7a <TIM1_UP_TIM10_IRQHandler+0x92>
	  {
		  DisplayData(textmat[address + 4][count - ((count/4)*2)],textmat[address + 12][ count - ((count/4)*2)]);
 8000a28:	4b4f      	ldr	r3, [pc, #316]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1d1a      	adds	r2, r3, #4
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a30:	6819      	ldr	r1, [r3, #0]
 8000a32:	4b4c      	ldr	r3, [pc, #304]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <TIM1_UP_TIM10_IRQHandler+0x54>
 8000a3a:	3303      	adds	r3, #3
 8000a3c:	109b      	asrs	r3, r3, #2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	1acb      	subs	r3, r1, r3
 8000a42:	494a      	ldr	r1, [pc, #296]	; (8000b6c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000a44:	0192      	lsls	r2, r2, #6
 8000a46:	4413      	add	r3, r2
 8000a48:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000a4c:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f103 020c 	add.w	r2, r3, #12
 8000a54:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	4b42      	ldr	r3, [pc, #264]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da00      	bge.n	8000a62 <TIM1_UP_TIM10_IRQHandler+0x7a>
 8000a60:	3303      	adds	r3, #3
 8000a62:	109b      	asrs	r3, r3, #2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	1acb      	subs	r3, r1, r3
 8000a68:	4940      	ldr	r1, [pc, #256]	; (8000b6c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000a6a:	0192      	lsls	r2, r2, #6
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a72:	4619      	mov	r1, r3
 8000a74:	f000 f886 	bl	8000b84 <DisplayData>
 8000a78:	e035      	b.n	8000ae6 <TIM1_UP_TIM10_IRQHandler+0xfe>
	  }
	  else if((count/4)%2 == 1)
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da00      	bge.n	8000a84 <TIM1_UP_TIM10_IRQHandler+0x9c>
 8000a82:	3303      	adds	r3, #3
 8000a84:	109b      	asrs	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	bfb8      	it	lt
 8000a8e:	425b      	neglt	r3, r3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d128      	bne.n	8000ae6 <TIM1_UP_TIM10_IRQHandler+0xfe>
	  {
		  DisplayData(textmat[address][count - ((count/4)*2) - 2],textmat[address + 8][count - ((count/4)*2) - 2]);
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	da00      	bge.n	8000aa6 <TIM1_UP_TIM10_IRQHandler+0xbe>
 8000aa4:	3303      	adds	r3, #3
 8000aa6:	109b      	asrs	r3, r3, #2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1acb      	subs	r3, r1, r3
 8000aac:	3b02      	subs	r3, #2
 8000aae:	492f      	ldr	r1, [pc, #188]	; (8000b6c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f103 0208 	add.w	r2, r3, #8
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000ac2:	6819      	ldr	r1, [r3, #0]
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	da00      	bge.n	8000ace <TIM1_UP_TIM10_IRQHandler+0xe6>
 8000acc:	3303      	adds	r3, #3
 8000ace:	109b      	asrs	r3, r3, #2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	1acb      	subs	r3, r1, r3
 8000ad4:	3b02      	subs	r3, #2
 8000ad6:	4925      	ldr	r1, [pc, #148]	; (8000b6c <TIM1_UP_TIM10_IRQHandler+0x184>)
 8000ad8:	0192      	lsls	r2, r2, #6
 8000ada:	4413      	add	r3, r2
 8000adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f000 f84f 	bl	8000b84 <DisplayData>
	  }

	  count++;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000aee:	6013      	str	r3, [r2, #0]
  }

  if(count>128)
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b80      	cmp	r3, #128	; 0x80
 8000af6:	dd1c      	ble.n	8000b32 <TIM1_UP_TIM10_IRQHandler+0x14a>
  {
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b00:	f000 fd26 	bl	8001550 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Lat_GPIO_Port, Lat_Pin, GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b0c:	f000 fd20 	bl	8001550 <HAL_GPIO_WritePin>
	  SwitchAddress();
 8000b10:	f000 f908 	bl	8000d24 <SwitchAddress>
	  HAL_GPIO_WritePin(Lat_GPIO_Port, Lat_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b1c:	f000 fd18 	bl	8001550 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b28:	f000 fd12 	bl	8001550 <HAL_GPIO_WritePin>
	  count = 0;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
  }

  //halving brightness
  if(count%4 == 0)
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d106      	bne.n	8000b4c <TIM1_UP_TIM10_IRQHandler+0x164>
  {
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b46:	f000 fd03 	bl	8001550 <HAL_GPIO_WritePin>
  }
  else
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b4a:	e005      	b.n	8000b58 <TIM1_UP_TIM10_IRQHandler+0x170>
	  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <TIM1_UP_TIM10_IRQHandler+0x178>)
 8000b54:	f000 fcfc 	bl	8001550 <HAL_GPIO_WritePin>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20001034 	.word	0x20001034
 8000b60:	40020800 	.word	0x40020800
 8000b64:	2000102c 	.word	0x2000102c
 8000b68:	20001028 	.word	0x20001028
 8000b6c:	20000000 	.word	0x20000000

08000b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART1_IRQHandler+0x10>)
 8000b76:	f001 fc61 	bl	800243c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20001074 	.word	0x20001074

08000b84 <DisplayData>:
	HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_RESET);
}

DisplayData(int a,int b)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	switch (a) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d85d      	bhi.n	8000c50 <DisplayData+0xcc>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <DisplayData+0x18>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bb1 	.word	0x08000bb1
 8000ba0:	08000bd1 	.word	0x08000bd1
 8000ba4:	08000bf1 	.word	0x08000bf1
 8000ba8:	08000c11 	.word	0x08000c11
 8000bac:	08000c31 	.word	0x08000c31
		case 0:
			{
				HAL_GPIO_WritePin(GPIOC, R0_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	485a      	ldr	r0, [pc, #360]	; (8000d20 <DisplayData+0x19c>)
 8000bb6:	f000 fccb 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G0_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4858      	ldr	r0, [pc, #352]	; (8000d20 <DisplayData+0x19c>)
 8000bc0:	f000 fcc6 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4855      	ldr	r0, [pc, #340]	; (8000d20 <DisplayData+0x19c>)
 8000bca:	f000 fcc1 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000bce:	e040      	b.n	8000c52 <DisplayData+0xce>
		case 1:
			{
				HAL_GPIO_WritePin(GPIOC, R0_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4852      	ldr	r0, [pc, #328]	; (8000d20 <DisplayData+0x19c>)
 8000bd6:	f000 fcbb 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G0_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4850      	ldr	r0, [pc, #320]	; (8000d20 <DisplayData+0x19c>)
 8000be0:	f000 fcb6 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2104      	movs	r1, #4
 8000be8:	484d      	ldr	r0, [pc, #308]	; (8000d20 <DisplayData+0x19c>)
 8000bea:	f000 fcb1 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000bee:	e030      	b.n	8000c52 <DisplayData+0xce>
		case 2:
			{
				HAL_GPIO_WritePin(GPIOC, R0_Pin, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	484a      	ldr	r0, [pc, #296]	; (8000d20 <DisplayData+0x19c>)
 8000bf6:	f000 fcab 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G0_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4848      	ldr	r0, [pc, #288]	; (8000d20 <DisplayData+0x19c>)
 8000c00:	f000 fca6 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4845      	ldr	r0, [pc, #276]	; (8000d20 <DisplayData+0x19c>)
 8000c0a:	f000 fca1 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000c0e:	e020      	b.n	8000c52 <DisplayData+0xce>
		case 3:
			{
				HAL_GPIO_WritePin(GPIOC, R0_Pin, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2101      	movs	r1, #1
 8000c14:	4842      	ldr	r0, [pc, #264]	; (8000d20 <DisplayData+0x19c>)
 8000c16:	f000 fc9b 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G0_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	4840      	ldr	r0, [pc, #256]	; (8000d20 <DisplayData+0x19c>)
 8000c20:	f000 fc96 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2104      	movs	r1, #4
 8000c28:	483d      	ldr	r0, [pc, #244]	; (8000d20 <DisplayData+0x19c>)
 8000c2a:	f000 fc91 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000c2e:	e010      	b.n	8000c52 <DisplayData+0xce>
		case 4:
			{
				HAL_GPIO_WritePin(GPIOC, R0_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2101      	movs	r1, #1
 8000c34:	483a      	ldr	r0, [pc, #232]	; (8000d20 <DisplayData+0x19c>)
 8000c36:	f000 fc8b 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G0_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2102      	movs	r1, #2
 8000c3e:	4838      	ldr	r0, [pc, #224]	; (8000d20 <DisplayData+0x19c>)
 8000c40:	f000 fc86 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B0_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2104      	movs	r1, #4
 8000c48:	4835      	ldr	r0, [pc, #212]	; (8000d20 <DisplayData+0x19c>)
 8000c4a:	f000 fc81 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000c4e:	e000      	b.n	8000c52 <DisplayData+0xce>
		default:
			break;
 8000c50:	bf00      	nop
	}
	switch (b) {
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d85d      	bhi.n	8000d14 <DisplayData+0x190>
 8000c58:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <DisplayData+0xdc>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c95 	.word	0x08000c95
 8000c68:	08000cb5 	.word	0x08000cb5
 8000c6c:	08000cd5 	.word	0x08000cd5
 8000c70:	08000cf5 	.word	0x08000cf5
		case 0:
			{
				HAL_GPIO_WritePin(GPIOC, R1_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	4829      	ldr	r0, [pc, #164]	; (8000d20 <DisplayData+0x19c>)
 8000c7a:	f000 fc69 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2110      	movs	r1, #16
 8000c82:	4827      	ldr	r0, [pc, #156]	; (8000d20 <DisplayData+0x19c>)
 8000c84:	f000 fc64 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4824      	ldr	r0, [pc, #144]	; (8000d20 <DisplayData+0x19c>)
 8000c8e:	f000 fc5f 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000c92:	e040      	b.n	8000d16 <DisplayData+0x192>
		case 1:
			{
				HAL_GPIO_WritePin(GPIOC, R1_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2108      	movs	r1, #8
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <DisplayData+0x19c>)
 8000c9a:	f000 fc59 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2110      	movs	r1, #16
 8000ca2:	481f      	ldr	r0, [pc, #124]	; (8000d20 <DisplayData+0x19c>)
 8000ca4:	f000 fc54 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2120      	movs	r1, #32
 8000cac:	481c      	ldr	r0, [pc, #112]	; (8000d20 <DisplayData+0x19c>)
 8000cae:	f000 fc4f 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000cb2:	e030      	b.n	8000d16 <DisplayData+0x192>
		case 2:
			{
				HAL_GPIO_WritePin(GPIOC, R1_Pin, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <DisplayData+0x19c>)
 8000cba:	f000 fc49 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	4817      	ldr	r0, [pc, #92]	; (8000d20 <DisplayData+0x19c>)
 8000cc4:	f000 fc44 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4814      	ldr	r0, [pc, #80]	; (8000d20 <DisplayData+0x19c>)
 8000cce:	f000 fc3f 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000cd2:	e020      	b.n	8000d16 <DisplayData+0x192>
		case 3:
			{
				HAL_GPIO_WritePin(GPIOC, R1_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <DisplayData+0x19c>)
 8000cda:	f000 fc39 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	480f      	ldr	r0, [pc, #60]	; (8000d20 <DisplayData+0x19c>)
 8000ce4:	f000 fc34 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2120      	movs	r1, #32
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <DisplayData+0x19c>)
 8000cee:	f000 fc2f 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000cf2:	e010      	b.n	8000d16 <DisplayData+0x192>
		case 4:
			{
				HAL_GPIO_WritePin(GPIOC, R1_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <DisplayData+0x19c>)
 8000cfa:	f000 fc29 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, G1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <DisplayData+0x19c>)
 8000d04:	f000 fc24 	bl	8001550 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, B1_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2120      	movs	r1, #32
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <DisplayData+0x19c>)
 8000d0e:	f000 fc1f 	bl	8001550 <HAL_GPIO_WritePin>
			}
			break;
 8000d12:	e000      	b.n	8000d16 <DisplayData+0x192>
		default:
			break;
 8000d14:	bf00      	nop
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020800 	.word	0x40020800

08000d24 <SwitchAddress>:

void SwitchAddress(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if(address == 0)//selects 4th,8th,12th,16th rows
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <SwitchAddress+0x98>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10d      	bne.n	8000d4c <SwitchAddress+0x28>
	{
		HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	4822      	ldr	r0, [pc, #136]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d36:	f000 fc0b 	bl	8001550 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d40:	f000 fc06 	bl	8001550 <HAL_GPIO_WritePin>
		address = 1;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <SwitchAddress+0x98>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
	{
		HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
		address = 0;
	}
}
 8000d4a:	e034      	b.n	8000db6 <SwitchAddress+0x92>
	else if(address == 1)//selects 3rd,7th,11th,15th rows
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <SwitchAddress+0x98>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10d      	bne.n	8000d70 <SwitchAddress+0x4c>
		HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d5a:	f000 fbf9 	bl	8001550 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d64:	f000 fbf4 	bl	8001550 <HAL_GPIO_WritePin>
		address = 2;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <SwitchAddress+0x98>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	e022      	b.n	8000db6 <SwitchAddress+0x92>
	else if(address == 2)//selects 2nd,6th,10th,14th rows
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <SwitchAddress+0x98>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d10d      	bne.n	8000d94 <SwitchAddress+0x70>
		HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d7e:	f000 fbe7 	bl	8001550 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	480e      	ldr	r0, [pc, #56]	; (8000dc0 <SwitchAddress+0x9c>)
 8000d88:	f000 fbe2 	bl	8001550 <HAL_GPIO_WritePin>
		address = 3;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <SwitchAddress+0x98>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	e010      	b.n	8000db6 <SwitchAddress+0x92>
	else if(address == 3)//selects 1st,5th,9th,13th rows
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <SwitchAddress+0x98>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d10c      	bne.n	8000db6 <SwitchAddress+0x92>
		HAL_GPIO_WritePin(GPIOC, A_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <SwitchAddress+0x9c>)
 8000da2:	f000 fbd5 	bl	8001550 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, B_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <SwitchAddress+0x9c>)
 8000dac:	f000 fbd0 	bl	8001550 <HAL_GPIO_WritePin>
		address = 0;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <SwitchAddress+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20001028 	.word	0x20001028
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <ChangeMatrix>:

//Function to display numerical data
void ChangeMatrix()
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
	int temp = slots_left;
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <ChangeMatrix+0x18>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	607b      	str	r3, [r7, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	200010b4 	.word	0x200010b4

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <SystemInit+0x60>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <SystemInit+0x60>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <SystemInit+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <SystemInit+0x64>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <SystemInit+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <SystemInit+0x64>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <SystemInit+0x64>)
 8000e0c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <SystemInit+0x64>)
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <SystemInit+0x68>)
 8000e1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <SystemInit+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <SystemInit+0x64>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SystemInit+0x60>)
 8000e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e34:	609a      	str	r2, [r3, #8]
#endif
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	40023800 	.word	0x40023800
 8000e48:	24003010 	.word	0x24003010

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
  ldr  r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ffb3 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 f891 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fb23 	bl	80004c8 <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e88:	08003038 	.word	0x08003038
  ldr  r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e90:	2000100c 	.word	0x2000100c
  ldr  r2, =_sbss
 8000e94:	2000100c 	.word	0x2000100c
  ldr  r3, = _ebss
 8000e98:	200010c0 	.word	0x200010c0

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f92b 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fcba 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f943 	bl	800118e <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f90b 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20001000 	.word	0x20001000
 8000f3c:	20001008 	.word	0x20001008
 8000f40:	20001004 	.word	0x20001004

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20001008 	.word	0x20001008
 8000f68:	200010bc 	.word	0x200010bc

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200010bc 	.word	0x200010bc

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <__NVIC_EnableIRQ+0x38>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	; (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff29 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff3e 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff31 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffa2 	bl	80010e0 <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d004      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e00c      	b.n	80011de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2205      	movs	r2, #5
 80011c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e16b      	b.n	80014e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 815a 	bne.w	80014da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d00b      	beq.n	8001246 <HAL_GPIO_Init+0x5a>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123a:	2b11      	cmp	r3, #17
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b12      	cmp	r3, #18
 8001244:	d130      	bne.n	80012a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	2203      	movs	r2, #3
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0xfc>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80b4 	beq.w	80014da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <HAL_GPIO_Init+0x308>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a5e      	ldr	r2, [pc, #376]	; (80014f4 <HAL_GPIO_Init+0x308>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <HAL_GPIO_Init+0x308>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a51      	ldr	r2, [pc, #324]	; (80014fc <HAL_GPIO_Init+0x310>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x324>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x328>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x20a>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e00e      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013f6:	2308      	movs	r3, #8
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4934      	ldr	r1, [pc, #208]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_GPIO_Init+0x330>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <HAL_GPIO_Init+0x330>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800145c:	4b2f      	ldr	r3, [pc, #188]	; (800151c <HAL_GPIO_Init+0x330>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_GPIO_Init+0x330>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_GPIO_Init+0x330>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_GPIO_Init+0x330>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_GPIO_Init+0x330>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_GPIO_Init+0x330>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae90 	bls.w	8001208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	3724      	adds	r7, #36	; 0x24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40021400 	.word	0x40021400
 8001514:	40021800 	.word	0x40021800
 8001518:	40021c00 	.word	0x40021c00
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	401a      	ands	r2, r3
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	429a      	cmp	r2, r3
 800159a:	d104      	bne.n	80015a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800159c:	887b      	ldrh	r3, [r7, #2]
 800159e:	041a      	lsls	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e25b      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d075      	beq.n	80016c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d6:	4ba3      	ldr	r3, [pc, #652]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4ba0      	ldr	r3, [pc, #640]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b9d      	ldr	r3, [pc, #628]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b99      	ldr	r3, [pc, #612]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e236      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x74>
 800161e:	4b91      	ldr	r3, [pc, #580]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a90      	ldr	r2, [pc, #576]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b8b      	ldr	r3, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a8a      	ldr	r2, [pc, #552]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a87      	ldr	r2, [pc, #540]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a83      	ldr	r2, [pc, #524]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a80      	ldr	r2, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc7c 	bl	8000f6c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc78 	bl	8000f6c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1fb      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xc0>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fc68 	bl	8000f6c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc64 	bl	8000f6c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1e7      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0xe8>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ce:	4b65      	ldr	r3, [pc, #404]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b62      	ldr	r3, [pc, #392]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1bb      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4952      	ldr	r1, [pc, #328]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <HAL_RCC_OscConfig+0x2b0>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fc1d 	bl	8000f6c <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fc19 	bl	8000f6c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e19c      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4940      	ldr	r1, [pc, #256]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <HAL_RCC_OscConfig+0x2b0>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fbfc 	bl	8000f6c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fbf8 	bl	8000f6c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e17b      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d030      	beq.n	8001804 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_RCC_OscConfig+0x2b4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fbdc 	bl	8000f6c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fbd8 	bl	8000f6c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e15b      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x200>
 80017d6:	e015      	b.n	8001804 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_RCC_OscConfig+0x2b4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fbc5 	bl	8000f6c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fbc1 	bl	8000f6c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e144      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a0 	beq.w	8001952 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x2b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d121      	bne.n	8001892 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_RCC_OscConfig+0x2b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_RCC_OscConfig+0x2b8>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fb87 	bl	8000f6c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e011      	b.n	8001886 <HAL_RCC_OscConfig+0x2ce>
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	42470000 	.word	0x42470000
 800186c:	42470e80 	.word	0x42470e80
 8001870:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001874:	f7ff fb7a 	bl	8000f6c <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0fd      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <HAL_RCC_OscConfig+0x4d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a7c      	ldr	r2, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e01c      	b.n	80018e2 <HAL_RCC_OscConfig+0x32a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x312>
 80018b0:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b4:	4a76      	ldr	r2, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6713      	str	r3, [r2, #112]	; 0x70
 80018bc:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a73      	ldr	r2, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x32a>
 80018ca:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ce:	4a70      	ldr	r2, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6713      	str	r3, [r2, #112]	; 0x70
 80018d6:	4b6e      	ldr	r3, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a6d      	ldr	r2, [pc, #436]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff fb3f 	bl	8000f6c <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff fb3b 	bl	8000f6c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e0bc      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ee      	beq.n	80018f2 <HAL_RCC_OscConfig+0x33a>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fb29 	bl	8000f6c <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb25 	bl	8000f6c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0a6      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ee      	bne.n	800191e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001946:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 800194c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8092 	beq.w	8001a80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d05c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d141      	bne.n	80019f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_RCC_OscConfig+0x4dc>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff faf9 	bl	8000f6c <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff faf5 	bl	8000f6c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e078      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69da      	ldr	r2, [r3, #28]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	019b      	lsls	r3, r3, #6
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	3b01      	subs	r3, #1
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	061b      	lsls	r3, r3, #24
 80019c0:	4933      	ldr	r1, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x4dc>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff face 	bl	8000f6c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff faca 	bl	8000f6c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e04d      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x41c>
 80019f2:	e045      	b.n	8001a80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x4dc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fab7 	bl	8000f6c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fab3 	bl	8000f6c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e036      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x44a>
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e029      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_RCC_OscConfig+0x4d8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d11c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d115      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a56:	4013      	ands	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	42470060 	.word	0x42470060

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0cc      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d90c      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0b8      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d020      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	494d      	ldr	r1, [pc, #308]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d044      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e067      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4934      	ldr	r1, [pc, #208]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f9f0 	bl	8000f6c <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f9ec 	bl	8000f6c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e04f      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d20c      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e032      	b.n	8001c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4601      	mov	r1, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	fa21 f303 	lsr.w	r3, r1, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f950 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023c00 	.word	0x40023c00
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08003010 	.word	0x08003010
 8001c5c:	20001000 	.word	0x20001000
 8001c60:	20001004 	.word	0x20001004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d007      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x32>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d008      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x38>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80b4 	bne.w	8001df8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c92:	60bb      	str	r3, [r7, #8]
       break;
 8001c94:	e0b3      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c98:	60bb      	str	r3, [r7, #8]
      break;
 8001c9a:	e0b0      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d04a      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b55      	ldr	r3, [pc, #340]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	ea03 0501 	and.w	r5, r3, r1
 8001cc8:	ea04 0602 	and.w	r6, r4, r2
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4632      	mov	r2, r6
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	f04f 0400 	mov.w	r4, #0
 8001cd8:	0154      	lsls	r4, r2, #5
 8001cda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	1b49      	subs	r1, r1, r5
 8001ce6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	0194      	lsls	r4, r2, #6
 8001cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	1a5b      	subs	r3, r3, r1
 8001cfc:	eb64 0402 	sbc.w	r4, r4, r2
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	00e2      	lsls	r2, r4, #3
 8001d0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d0e:	00d9      	lsls	r1, r3, #3
 8001d10:	460b      	mov	r3, r1
 8001d12:	4614      	mov	r4, r2
 8001d14:	195b      	adds	r3, r3, r5
 8001d16:	eb44 0406 	adc.w	r4, r4, r6
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	0262      	lsls	r2, r4, #9
 8001d24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d28:	0259      	lsls	r1, r3, #9
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	f7fe fa44 	bl	80001c8 <__aeabi_uldivmod>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e049      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	f04f 0400 	mov.w	r4, #0
 8001d52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	ea03 0501 	and.w	r5, r3, r1
 8001d5e:	ea04 0602 	and.w	r6, r4, r2
 8001d62:	4629      	mov	r1, r5
 8001d64:	4632      	mov	r2, r6
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	0154      	lsls	r4, r2, #5
 8001d70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d74:	014b      	lsls	r3, r1, #5
 8001d76:	4619      	mov	r1, r3
 8001d78:	4622      	mov	r2, r4
 8001d7a:	1b49      	subs	r1, r1, r5
 8001d7c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	0194      	lsls	r4, r2, #6
 8001d8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	1a5b      	subs	r3, r3, r1
 8001d92:	eb64 0402 	sbc.w	r4, r4, r2
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	00e2      	lsls	r2, r4, #3
 8001da0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001da4:	00d9      	lsls	r1, r3, #3
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	195b      	adds	r3, r3, r5
 8001dac:	eb44 0406 	adc.w	r4, r4, r6
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	02a2      	lsls	r2, r4, #10
 8001dba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dbe:	0299      	lsls	r1, r3, #10
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	f7fe f9f9 	bl	80001c8 <__aeabi_uldivmod>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460c      	mov	r4, r1
 8001dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	60bb      	str	r3, [r7, #8]
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dfa:	60bb      	str	r3, [r7, #8]
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20001000 	.word	0x20001000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003020 	.word	0x08003020

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003020 	.word	0x08003020

08001e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e01d      	b.n	8001eca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fcfa 	bl	800089c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f000 f968 	bl	8002190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b06      	cmp	r3, #6
 8001efa:	d007      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d122      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0202 	mvn.w	r2, #2
 8001f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8f8 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001f62:	e005      	b.n	8001f70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8ea 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8fb 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d122      	bne.n	8001fca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d11b      	bne.n	8001fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0204 	mvn.w	r2, #4
 8001f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8ce 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001fb6:	e005      	b.n	8001fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f8c0 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8d1 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d122      	bne.n	800201e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11b      	bne.n	800201e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0208 	mvn.w	r2, #8
 8001fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8a4 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 800200a:	e005      	b.n	8002018 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f896 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8a7 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b10      	cmp	r3, #16
 800202a:	d122      	bne.n	8002072 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b10      	cmp	r3, #16
 8002038:	d11b      	bne.n	8002072 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0210 	mvn.w	r2, #16
 8002042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2208      	movs	r2, #8
 8002048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f87a 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 800205e:	e005      	b.n	800206c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f86c 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f87d 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d10e      	bne.n	800209e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 0201 	mvn.w	r2, #1
 8002096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f846 	bl	800212a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	d10e      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d107      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f90d 	bl	80022e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d10e      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f842 	bl	800217a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10e      	bne.n	8002122 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d107      	bne.n	8002122 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0220 	mvn.w	r2, #32
 800211a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8d7 	bl	80022d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ae:	d00f      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <TIM_Base_SetConfig+0x118>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a3c      	ldr	r2, [pc, #240]	; (80022ac <TIM_Base_SetConfig+0x11c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <TIM_Base_SetConfig+0x120>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3a      	ldr	r2, [pc, #232]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f0:	d027      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2c      	ldr	r2, [pc, #176]	; (80022a8 <TIM_Base_SetConfig+0x118>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d023      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <TIM_Base_SetConfig+0x11c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2a      	ldr	r2, [pc, #168]	; (80022b0 <TIM_Base_SetConfig+0x120>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d017      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <TIM_Base_SetConfig+0x128>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <TIM_Base_SetConfig+0x12c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <TIM_Base_SetConfig+0x130>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <TIM_Base_SetConfig+0x134>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <TIM_Base_SetConfig+0x138>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a23      	ldr	r2, [pc, #140]	; (80022cc <TIM_Base_SetConfig+0x13c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <TIM_Base_SetConfig+0x114>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0xf8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <TIM_Base_SetConfig+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40010400 	.word	0x40010400
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40014400 	.word	0x40014400
 80022c0:	40014800 	.word	0x40014800
 80022c4:	40001800 	.word	0x40001800
 80022c8:	40001c00 	.word	0x40001c00
 80022cc:	40002000 	.word	0x40002000

080022d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e03f      	b.n	800238a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fae4 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2224      	movs	r2, #36	; 0x24
 8002328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 fab3 	bl	80028a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002350:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002360:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002370:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	4613      	mov	r3, r2
 800239e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d140      	bne.n	800242e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_UART_Receive_IT+0x26>
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e039      	b.n	8002430 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_UART_Receive_IT+0x38>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e032      	b.n	8002430 <HAL_UART_Receive_IT+0x9e>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2222      	movs	r2, #34	; 0x22
 80023ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002408:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x52>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f98c 	bl	80027a4 <UART_Receive_IT>
      return;
 800248c:	e0d1      	b.n	8002632 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80b0 	beq.w	80025f6 <HAL_UART_IRQHandler+0x1ba>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <HAL_UART_IRQHandler+0x70>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80a5 	beq.w	80025f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_UART_IRQHandler+0x90>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_UART_IRQHandler+0xb0>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	f043 0202 	orr.w	r2, r3, #2
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_UART_IRQHandler+0xd0>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	f043 0204 	orr.w	r2, r3, #4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00f      	beq.n	8002536 <HAL_UART_IRQHandler+0xfa>
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <HAL_UART_IRQHandler+0xee>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d078      	beq.n	8002630 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_UART_IRQHandler+0x11c>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f926 	bl	80027a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <HAL_UART_IRQHandler+0x144>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d031      	beq.n	80025e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f86f 	bl	8002664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d123      	bne.n	80025dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_UART_IRQHandler+0x1fc>)
 80025b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fdf4 	bl	80011a6 <HAL_DMA_Abort_IT>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d016      	beq.n	80025f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ce:	4610      	mov	r0, r2
 80025d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d2:	e00e      	b.n	80025f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f83b 	bl	8002650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025da:	e00a      	b.n	80025f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f837 	bl	8002650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e2:	e006      	b.n	80025f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f833 	bl	8002650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025f0:	e01e      	b.n	8002630 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f2:	bf00      	nop
    return;
 80025f4:	e01c      	b.n	8002630 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_UART_IRQHandler+0x1d6>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f85c 	bl	80026c8 <UART_Transmit_IT>
    return;
 8002610:	e00f      	b.n	8002632 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_UART_IRQHandler+0x1f6>
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8a4 	bl	8002774 <UART_EndTransmit_IT>
    return;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002630:	bf00      	nop
  }
}
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	080026a1 	.word	0x080026a1

0800263c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800267a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff ffc8 	bl	8002650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b21      	cmp	r3, #33	; 0x21
 80026da:	d144      	bne.n	8002766 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d11a      	bne.n	800271c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]
 800270e:	e00e      	b.n	800272e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	e008      	b.n	800272e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	1c59      	adds	r1, r3, #1
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6211      	str	r1, [r2, #32]
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29b      	uxth	r3, r3
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4619      	mov	r1, r3
 800273c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002760:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
  }
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff51 	bl	800263c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b22      	cmp	r3, #34	; 0x22
 80027b6:	d171      	bne.n	800289c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d123      	bne.n	800280a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10e      	bne.n	80027ee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	1c9a      	adds	r2, r3, #2
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
 80027ec:	e029      	b.n	8002842 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
 8002808:	e01b      	b.n	8002842 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6858      	ldr	r0, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	1c59      	adds	r1, r3, #1
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6291      	str	r1, [r2, #40]	; 0x28
 8002822:	b2c2      	uxtb	r2, r0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e00c      	b.n	8002842 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	1c58      	adds	r0, r3, #1
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	6288      	str	r0, [r1, #40]	; 0x28
 800283a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29b      	uxth	r3, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4619      	mov	r1, r3
 8002850:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002852:	2b00      	cmp	r3, #0
 8002854:	d120      	bne.n	8002898 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0220 	bic.w	r2, r2, #32
 8002864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fd ffb8 	bl	8000804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e002      	b.n	800289e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028ea:	f023 030c 	bic.w	r3, r3, #12
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	430b      	orrs	r3, r1
 80028f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699a      	ldr	r2, [r3, #24]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002916:	f040 818b 	bne.w	8002c30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4ac1      	ldr	r2, [pc, #772]	; (8002c24 <UART_SetConfig+0x37c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d005      	beq.n	8002930 <UART_SetConfig+0x88>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4abf      	ldr	r2, [pc, #764]	; (8002c28 <UART_SetConfig+0x380>)
 800292a:	4293      	cmp	r3, r2
 800292c:	f040 80bd 	bne.w	8002aaa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002930:	f7ff fa90 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002934:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	461d      	mov	r5, r3
 800293a:	f04f 0600 	mov.w	r6, #0
 800293e:	46a8      	mov	r8, r5
 8002940:	46b1      	mov	r9, r6
 8002942:	eb18 0308 	adds.w	r3, r8, r8
 8002946:	eb49 0409 	adc.w	r4, r9, r9
 800294a:	4698      	mov	r8, r3
 800294c:	46a1      	mov	r9, r4
 800294e:	eb18 0805 	adds.w	r8, r8, r5
 8002952:	eb49 0906 	adc.w	r9, r9, r6
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002962:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002966:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800296a:	4688      	mov	r8, r1
 800296c:	4691      	mov	r9, r2
 800296e:	eb18 0005 	adds.w	r0, r8, r5
 8002972:	eb49 0106 	adc.w	r1, r9, r6
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	461d      	mov	r5, r3
 800297c:	f04f 0600 	mov.w	r6, #0
 8002980:	196b      	adds	r3, r5, r5
 8002982:	eb46 0406 	adc.w	r4, r6, r6
 8002986:	461a      	mov	r2, r3
 8002988:	4623      	mov	r3, r4
 800298a:	f7fd fc1d 	bl	80001c8 <__aeabi_uldivmod>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	461a      	mov	r2, r3
 8002994:	4ba5      	ldr	r3, [pc, #660]	; (8002c2c <UART_SetConfig+0x384>)
 8002996:	fba3 2302 	umull	r2, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	461d      	mov	r5, r3
 80029a4:	f04f 0600 	mov.w	r6, #0
 80029a8:	46a9      	mov	r9, r5
 80029aa:	46b2      	mov	sl, r6
 80029ac:	eb19 0309 	adds.w	r3, r9, r9
 80029b0:	eb4a 040a 	adc.w	r4, sl, sl
 80029b4:	4699      	mov	r9, r3
 80029b6:	46a2      	mov	sl, r4
 80029b8:	eb19 0905 	adds.w	r9, r9, r5
 80029bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029d4:	4689      	mov	r9, r1
 80029d6:	4692      	mov	sl, r2
 80029d8:	eb19 0005 	adds.w	r0, r9, r5
 80029dc:	eb4a 0106 	adc.w	r1, sl, r6
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	461d      	mov	r5, r3
 80029e6:	f04f 0600 	mov.w	r6, #0
 80029ea:	196b      	adds	r3, r5, r5
 80029ec:	eb46 0406 	adc.w	r4, r6, r6
 80029f0:	461a      	mov	r2, r3
 80029f2:	4623      	mov	r3, r4
 80029f4:	f7fd fbe8 	bl	80001c8 <__aeabi_uldivmod>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <UART_SetConfig+0x384>)
 8002a00:	fba3 1302 	umull	r1, r3, r3, r2
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	2164      	movs	r1, #100	; 0x64
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	3332      	adds	r3, #50	; 0x32
 8002a12:	4a86      	ldr	r2, [pc, #536]	; (8002c2c <UART_SetConfig+0x384>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a20:	4498      	add	r8, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	461d      	mov	r5, r3
 8002a26:	f04f 0600 	mov.w	r6, #0
 8002a2a:	46a9      	mov	r9, r5
 8002a2c:	46b2      	mov	sl, r6
 8002a2e:	eb19 0309 	adds.w	r3, r9, r9
 8002a32:	eb4a 040a 	adc.w	r4, sl, sl
 8002a36:	4699      	mov	r9, r3
 8002a38:	46a2      	mov	sl, r4
 8002a3a:	eb19 0905 	adds.w	r9, r9, r5
 8002a3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a56:	4689      	mov	r9, r1
 8002a58:	4692      	mov	sl, r2
 8002a5a:	eb19 0005 	adds.w	r0, r9, r5
 8002a5e:	eb4a 0106 	adc.w	r1, sl, r6
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	461d      	mov	r5, r3
 8002a68:	f04f 0600 	mov.w	r6, #0
 8002a6c:	196b      	adds	r3, r5, r5
 8002a6e:	eb46 0406 	adc.w	r4, r6, r6
 8002a72:	461a      	mov	r2, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	f7fd fba7 	bl	80001c8 <__aeabi_uldivmod>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <UART_SetConfig+0x384>)
 8002a82:	fba3 1302 	umull	r1, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2164      	movs	r1, #100	; 0x64
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a65      	ldr	r2, [pc, #404]	; (8002c2c <UART_SetConfig+0x384>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 0207 	and.w	r2, r3, #7
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4442      	add	r2, r8
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e26f      	b.n	8002f8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aaa:	f7ff f9bf 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002aae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	f04f 0600 	mov.w	r6, #0
 8002ab8:	46a8      	mov	r8, r5
 8002aba:	46b1      	mov	r9, r6
 8002abc:	eb18 0308 	adds.w	r3, r8, r8
 8002ac0:	eb49 0409 	adc.w	r4, r9, r9
 8002ac4:	4698      	mov	r8, r3
 8002ac6:	46a1      	mov	r9, r4
 8002ac8:	eb18 0805 	adds.w	r8, r8, r5
 8002acc:	eb49 0906 	adc.w	r9, r9, r6
 8002ad0:	f04f 0100 	mov.w	r1, #0
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002adc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ae0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ae4:	4688      	mov	r8, r1
 8002ae6:	4691      	mov	r9, r2
 8002ae8:	eb18 0005 	adds.w	r0, r8, r5
 8002aec:	eb49 0106 	adc.w	r1, r9, r6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	461d      	mov	r5, r3
 8002af6:	f04f 0600 	mov.w	r6, #0
 8002afa:	196b      	adds	r3, r5, r5
 8002afc:	eb46 0406 	adc.w	r4, r6, r6
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	f7fd fb60 	bl	80001c8 <__aeabi_uldivmod>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <UART_SetConfig+0x384>)
 8002b10:	fba3 2302 	umull	r2, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	f04f 0600 	mov.w	r6, #0
 8002b22:	46a9      	mov	r9, r5
 8002b24:	46b2      	mov	sl, r6
 8002b26:	eb19 0309 	adds.w	r3, r9, r9
 8002b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b2e:	4699      	mov	r9, r3
 8002b30:	46a2      	mov	sl, r4
 8002b32:	eb19 0905 	adds.w	r9, r9, r5
 8002b36:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b4e:	4689      	mov	r9, r1
 8002b50:	4692      	mov	sl, r2
 8002b52:	eb19 0005 	adds.w	r0, r9, r5
 8002b56:	eb4a 0106 	adc.w	r1, sl, r6
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	461d      	mov	r5, r3
 8002b60:	f04f 0600 	mov.w	r6, #0
 8002b64:	196b      	adds	r3, r5, r5
 8002b66:	eb46 0406 	adc.w	r4, r6, r6
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4623      	mov	r3, r4
 8002b6e:	f7fd fb2b 	bl	80001c8 <__aeabi_uldivmod>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	461a      	mov	r2, r3
 8002b78:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <UART_SetConfig+0x384>)
 8002b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2164      	movs	r1, #100	; 0x64
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	3332      	adds	r3, #50	; 0x32
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <UART_SetConfig+0x384>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b9a:	4498      	add	r8, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	f04f 0600 	mov.w	r6, #0
 8002ba4:	46a9      	mov	r9, r5
 8002ba6:	46b2      	mov	sl, r6
 8002ba8:	eb19 0309 	adds.w	r3, r9, r9
 8002bac:	eb4a 040a 	adc.w	r4, sl, sl
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	46a2      	mov	sl, r4
 8002bb4:	eb19 0905 	adds.w	r9, r9, r5
 8002bb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bd0:	4689      	mov	r9, r1
 8002bd2:	4692      	mov	sl, r2
 8002bd4:	eb19 0005 	adds.w	r0, r9, r5
 8002bd8:	eb4a 0106 	adc.w	r1, sl, r6
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	461d      	mov	r5, r3
 8002be2:	f04f 0600 	mov.w	r6, #0
 8002be6:	196b      	adds	r3, r5, r5
 8002be8:	eb46 0406 	adc.w	r4, r6, r6
 8002bec:	461a      	mov	r2, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	f7fd faea 	bl	80001c8 <__aeabi_uldivmod>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <UART_SetConfig+0x384>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	2164      	movs	r1, #100	; 0x64
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	3332      	adds	r3, #50	; 0x32
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <UART_SetConfig+0x384>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	f003 0207 	and.w	r2, r3, #7
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4442      	add	r2, r8
 8002c20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c22:	e1b2      	b.n	8002f8a <UART_SetConfig+0x6e2>
 8002c24:	40011000 	.word	0x40011000
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4ad7      	ldr	r2, [pc, #860]	; (8002f94 <UART_SetConfig+0x6ec>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d005      	beq.n	8002c46 <UART_SetConfig+0x39e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4ad6      	ldr	r2, [pc, #856]	; (8002f98 <UART_SetConfig+0x6f0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	f040 80d1 	bne.w	8002de8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c46:	f7ff f905 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002c4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	469a      	mov	sl, r3
 8002c50:	f04f 0b00 	mov.w	fp, #0
 8002c54:	46d0      	mov	r8, sl
 8002c56:	46d9      	mov	r9, fp
 8002c58:	eb18 0308 	adds.w	r3, r8, r8
 8002c5c:	eb49 0409 	adc.w	r4, r9, r9
 8002c60:	4698      	mov	r8, r3
 8002c62:	46a1      	mov	r9, r4
 8002c64:	eb18 080a 	adds.w	r8, r8, sl
 8002c68:	eb49 090b 	adc.w	r9, r9, fp
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c80:	4688      	mov	r8, r1
 8002c82:	4691      	mov	r9, r2
 8002c84:	eb1a 0508 	adds.w	r5, sl, r8
 8002c88:	eb4b 0609 	adc.w	r6, fp, r9
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	0094      	lsls	r4, r2, #2
 8002ca0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ca4:	008b      	lsls	r3, r1, #2
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4623      	mov	r3, r4
 8002caa:	4628      	mov	r0, r5
 8002cac:	4631      	mov	r1, r6
 8002cae:	f7fd fa8b 	bl	80001c8 <__aeabi_uldivmod>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4bb8      	ldr	r3, [pc, #736]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002cba:	fba3 2302 	umull	r2, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	469b      	mov	fp, r3
 8002cc8:	f04f 0c00 	mov.w	ip, #0
 8002ccc:	46d9      	mov	r9, fp
 8002cce:	46e2      	mov	sl, ip
 8002cd0:	eb19 0309 	adds.w	r3, r9, r9
 8002cd4:	eb4a 040a 	adc.w	r4, sl, sl
 8002cd8:	4699      	mov	r9, r3
 8002cda:	46a2      	mov	sl, r4
 8002cdc:	eb19 090b 	adds.w	r9, r9, fp
 8002ce0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce4:	f04f 0100 	mov.w	r1, #0
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cf8:	4689      	mov	r9, r1
 8002cfa:	4692      	mov	sl, r2
 8002cfc:	eb1b 0509 	adds.w	r5, fp, r9
 8002d00:	eb4c 060a 	adc.w	r6, ip, sl
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	f04f 0400 	mov.w	r4, #0
 8002d16:	0094      	lsls	r4, r2, #2
 8002d18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d1c:	008b      	lsls	r3, r1, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4623      	mov	r3, r4
 8002d22:	4628      	mov	r0, r5
 8002d24:	4631      	mov	r1, r6
 8002d26:	f7fd fa4f 	bl	80001c8 <__aeabi_uldivmod>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b9a      	ldr	r3, [pc, #616]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002d32:	fba3 1302 	umull	r1, r3, r3, r2
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2164      	movs	r1, #100	; 0x64
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	3332      	adds	r3, #50	; 0x32
 8002d44:	4a95      	ldr	r2, [pc, #596]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d50:	4498      	add	r8, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	469b      	mov	fp, r3
 8002d56:	f04f 0c00 	mov.w	ip, #0
 8002d5a:	46d9      	mov	r9, fp
 8002d5c:	46e2      	mov	sl, ip
 8002d5e:	eb19 0309 	adds.w	r3, r9, r9
 8002d62:	eb4a 040a 	adc.w	r4, sl, sl
 8002d66:	4699      	mov	r9, r3
 8002d68:	46a2      	mov	sl, r4
 8002d6a:	eb19 090b 	adds.w	r9, r9, fp
 8002d6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d86:	4689      	mov	r9, r1
 8002d88:	4692      	mov	sl, r2
 8002d8a:	eb1b 0509 	adds.w	r5, fp, r9
 8002d8e:	eb4c 060a 	adc.w	r6, ip, sl
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	0094      	lsls	r4, r2, #2
 8002da6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002daa:	008b      	lsls	r3, r1, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	4631      	mov	r1, r6
 8002db4:	f7fd fa08 	bl	80001c8 <__aeabi_uldivmod>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b77      	ldr	r3, [pc, #476]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	; 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a72      	ldr	r2, [pc, #456]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4442      	add	r2, r8
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	e0d0      	b.n	8002f8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7ff f820 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002dec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	469a      	mov	sl, r3
 8002df2:	f04f 0b00 	mov.w	fp, #0
 8002df6:	46d0      	mov	r8, sl
 8002df8:	46d9      	mov	r9, fp
 8002dfa:	eb18 0308 	adds.w	r3, r8, r8
 8002dfe:	eb49 0409 	adc.w	r4, r9, r9
 8002e02:	4698      	mov	r8, r3
 8002e04:	46a1      	mov	r9, r4
 8002e06:	eb18 080a 	adds.w	r8, r8, sl
 8002e0a:	eb49 090b 	adc.w	r9, r9, fp
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e22:	4688      	mov	r8, r1
 8002e24:	4691      	mov	r9, r2
 8002e26:	eb1a 0508 	adds.w	r5, sl, r8
 8002e2a:	eb4b 0609 	adc.w	r6, fp, r9
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4619      	mov	r1, r3
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	0094      	lsls	r4, r2, #2
 8002e42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e46:	008b      	lsls	r3, r1, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	4631      	mov	r1, r6
 8002e50:	f7fd f9ba 	bl	80001c8 <__aeabi_uldivmod>
 8002e54:	4603      	mov	r3, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b50      	ldr	r3, [pc, #320]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	469b      	mov	fp, r3
 8002e6a:	f04f 0c00 	mov.w	ip, #0
 8002e6e:	46d9      	mov	r9, fp
 8002e70:	46e2      	mov	sl, ip
 8002e72:	eb19 0309 	adds.w	r3, r9, r9
 8002e76:	eb4a 040a 	adc.w	r4, sl, sl
 8002e7a:	4699      	mov	r9, r3
 8002e7c:	46a2      	mov	sl, r4
 8002e7e:	eb19 090b 	adds.w	r9, r9, fp
 8002e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e9a:	4689      	mov	r9, r1
 8002e9c:	4692      	mov	sl, r2
 8002e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8002ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	f04f 0400 	mov.w	r4, #0
 8002eb8:	0094      	lsls	r4, r2, #2
 8002eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ebe:	008b      	lsls	r3, r1, #2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	4631      	mov	r1, r6
 8002ec8:	f7fd f97e 	bl	80001c8 <__aeabi_uldivmod>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef2:	4498      	add	r8, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	469b      	mov	fp, r3
 8002ef8:	f04f 0c00 	mov.w	ip, #0
 8002efc:	46d9      	mov	r9, fp
 8002efe:	46e2      	mov	sl, ip
 8002f00:	eb19 0309 	adds.w	r3, r9, r9
 8002f04:	eb4a 040a 	adc.w	r4, sl, sl
 8002f08:	4699      	mov	r9, r3
 8002f0a:	46a2      	mov	sl, r4
 8002f0c:	eb19 090b 	adds.w	r9, r9, fp
 8002f10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f14:	f04f 0100 	mov.w	r1, #0
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f28:	4689      	mov	r9, r1
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	eb1b 0509 	adds.w	r5, fp, r9
 8002f30:	eb4c 060a 	adc.w	r6, ip, sl
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0094      	lsls	r4, r2, #2
 8002f48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4623      	mov	r3, r4
 8002f52:	4628      	mov	r0, r5
 8002f54:	4631      	mov	r1, r6
 8002f56:	f7fd f937 	bl	80001c8 <__aeabi_uldivmod>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002f62:	fba3 1302 	umull	r1, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2164      	movs	r1, #100	; 0x64
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	; 0x32
 8002f74:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <UART_SetConfig+0x6f4>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4442      	add	r2, r8
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	e7ff      	b.n	8002f8a <UART_SetConfig+0x6e2>
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	40011000 	.word	0x40011000
 8002f98:	40011400 	.word	0x40011400
 8002f9c:	51eb851f 	.word	0x51eb851f

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4e0d      	ldr	r6, [pc, #52]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa4:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa6:	1ba4      	subs	r4, r4, r6
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	2500      	movs	r5, #0
 8002fac:	42a5      	cmp	r5, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	4e0b      	ldr	r6, [pc, #44]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb2:	4c0c      	ldr	r4, [pc, #48]	; (8002fe4 <__libc_init_array+0x44>)
 8002fb4:	f000 f820 	bl	8002ff8 <_init>
 8002fb8:	1ba4      	subs	r4, r4, r6
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	42a5      	cmp	r5, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fc8:	4798      	blx	r3
 8002fca:	3501      	adds	r5, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd2:	4798      	blx	r3
 8002fd4:	3501      	adds	r5, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003030 	.word	0x08003030
 8002fdc:	08003030 	.word	0x08003030
 8002fe0:	08003030 	.word	0x08003030
 8002fe4:	08003034 	.word	0x08003034

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
